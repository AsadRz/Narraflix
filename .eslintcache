[{"D:\\Practice Projects\\Narraflix\\src\\index.js":"1","D:\\Practice Projects\\Narraflix\\src\\Components\\StoryRedirection\\StoryRedirection.js":"2","D:\\Practice Projects\\Narraflix\\src\\store\\reducer.js":"3","D:\\Practice Projects\\Narraflix\\src\\Components\\Home\\Home.js":"4","D:\\Practice Projects\\Narraflix\\src\\Components\\Thumbnail\\Thumbnail.js":"5"},{"size":588,"mtime":1613132592764,"results":"6","hashOfConfig":"7"},{"size":1235,"mtime":1628502349362,"results":"8","hashOfConfig":"7"},{"size":891,"mtime":1613132592768,"results":"9","hashOfConfig":"7"},{"size":1404,"mtime":1628503856210,"results":"10","hashOfConfig":"7"},{"size":10212,"mtime":1628503799919,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17abv8n",{"filePath":"14","messages":"15","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"D:\\Practice Projects\\Narraflix\\src\\index.js",[],"D:\\Practice Projects\\Narraflix\\src\\Components\\StoryRedirection\\StoryRedirection.js",["23","24","25"],"D:\\Practice Projects\\Narraflix\\src\\store\\reducer.js",[],"D:\\Practice Projects\\Narraflix\\src\\Components\\Home\\Home.js",[],"D:\\Practice Projects\\Narraflix\\src\\Components\\Thumbnail\\Thumbnail.js",["26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41"],"import './Thumbnail.css';\r\n// import Modal from \"@material-ui/core/Modal\";\r\n// import { makeStyles } from \"@material-ui/core/styles\";\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport ModalImage from './ModalImage';\r\nimport Loader from '../../assets/Img/loaderrrrr.gif';\r\n\r\nconst Thumbnail = (props) => {\r\n  let history = useHistory();\r\n  let { sid } = useParams();\r\n  //useState\r\n  const [viewModal, setViewModal] = useState(props.open);\r\n  const storyItems = useSelector((state) => state.storyItems);\r\n  const hotSpots = useSelector((state) => state.hotSpots);\r\n  const [bg, setBg] = useState(props.image);\r\n  const [index, setIndex] = useState(props.index);\r\n  const storyLines = useSelector((state) => state.storyLines);\r\n  const [id, setId] = useState(props.id || sid);\r\n  // const [width, setWidth] = useState(window.innerWidth);\r\n  const [imgLoading, setImgLoading] = useState(true);\r\n  const [videoSrc, setVideoSrc] = useState(null);\r\n\r\n  const storyLineExtractor = (id) => {\r\n    let storyLine = storyLines.filter((findStoryLine) => {\r\n      if (findStoryLine.id == id) {\r\n        return findStoryLine;\r\n      }\r\n    });\r\n\r\n    storyLine = storyLine[0];\r\n    return storyLine;\r\n  };\r\n  useEffect(() => {\r\n    // debugger;\r\n    setBg(storyLine.storylineitem_set[index].image);\r\n    if (storyLine.storylineitem_set[index].is_video) {\r\n      setVideoSrc(storyLine.storylineitem_set[index].video);\r\n    }\r\n  }, [index]);\r\n  let storyLine = storyLineExtractor(id);\r\n  let length = storyLine.storylineitem_set.length;\r\n\r\n  const storyItemSpec = (id) => {\r\n    let storyItemObjects = storyItems.filter((storyItemObject) => {\r\n      if (storyItemObject.id === id) {\r\n        return storyItemObject;\r\n      }\r\n    });\r\n    return storyItemObjects;\r\n  };\r\n  const storyItemExtractor = (id) => {\r\n    // debugger;\r\n    let hotSpotSet = storyItems.map((currentStoryLine) => {\r\n      if (currentStoryLine.storyline === id) {\r\n        return currentStoryLine.hotspot_set;\r\n      }\r\n    });\r\n    hotSpotSet = hotSpotSet.filter((filterUndefinedItem) => {\r\n      if (filterUndefinedItem !== undefined) {\r\n        return filterUndefinedItem;\r\n      }\r\n    });\r\n    let hotS = hotSpotSet.map((nestedArrays) => {\r\n      return nestedArrays.map((nestedArray) => {\r\n        return hotSpots.filter((filteredArray) => {\r\n          if (nestedArray == filteredArray.id) {\r\n            return filteredArray;\r\n          }\r\n        });\r\n      });\r\n    });\r\n    hotS = hotS.map((data, Index) => {\r\n      if (Index == index) {\r\n        return data.map((hotspots) => {\r\n          return hotspots.map((hotspot) => {\r\n            if (\r\n              hotspot.type === 'link' &&\r\n              (!imgLoading || storyLine.storylineitem_set[index].is_video)\r\n            ) {\r\n              // console.log('Hotspots', hotspot);\r\n              // const windowWidth = window.innerWidth;\r\n              // const imageWidth =\r\n              //   document.getElementsByClassName('imageContainer')[0]\r\n              //     .clientWidth;\r\n\r\n              // const remainingWidth = (windowWidth - imageWidth) / 2;\r\n\r\n              // const horizontalHotSpotPosition =\r\n              //   (remainingWidth + (hotspot.position_left / 100) * imageWidth) /\r\n              //   100;\r\n\r\n              // const windowHeight = window.innerHeight;\r\n              // const imageHeight = document.getElementById('image').clientHeight;\r\n\r\n              // const remainingHeight = (windowHeight - imageHeight) / 2;\r\n\r\n              // const verticalHotSpotPosition =\r\n              //   (remainingHeight + (hotspot.position_top / 100) * imageHeight) /\r\n              //   100;\r\n\r\n              // console.log({\r\n              //   horizontalHotSpotPosition,\r\n              //   verticalHotSpotPosition,\r\n              // });\r\n\r\n              return (\r\n                <div\r\n                  className='hotspot'\r\n                  style={{\r\n                    position: 'absolute',\r\n                    fontSize: `${hotspot.font_size}`,\r\n                    textAlign: `${hotspot.text_align}`,\r\n                    top: `${hotspot.position_top}%`,\r\n                    left: `${hotspot.position_left}%`,\r\n                    color: `#${hotspot.text_hex_color}`,\r\n                  }}\r\n                  onClick={() =>\r\n                    hotspotInternalClick(hotspot.link_to_story_line_item)\r\n                  }\r\n                >\r\n                  {' '}\r\n                  <div className='circle'></div>\r\n                </div>\r\n              );\r\n            } else if (\r\n              hotspot.type === 'text' &&\r\n              (!imgLoading || storyLine.storylineitem_set[index].is_video)\r\n            ) {\r\n              return (\r\n                <p\r\n                  style={{\r\n                    position: 'absolute',\r\n                    fontSize: `${hotspot.font_size}`,\r\n                    textAlign: `${hotspot.text_align}`,\r\n                    top: `${hotspot.position_top}%`,\r\n                    left: `${hotspot.position_left}%`,\r\n                    color: `#${hotspot.text_hex_color}`,\r\n                  }}\r\n                >\r\n                  {hotspot.content}\r\n                </p>\r\n              );\r\n            } else if (\r\n              hotspot.type === 'web' &&\r\n              (!imgLoading || storyLine.storylineitem_set[index].is_video)\r\n            ) {\r\n              return (\r\n                <div className='hotspot web' onClick={hotspotExternalClick}>\r\n                  <a\r\n                    style={{\r\n                      position: 'absolute',\r\n                      fontSize: `${hotspot.font_size}`,\r\n                      textAlign: `${hotspot.text_align}`,\r\n                      top: `${hotspot.position_top}%`,\r\n                      left: `${hotspot.position_left}%`,\r\n                      color: `#${hotspot.text_hex_color}`,\r\n                    }}\r\n                    href={`${hotspot.external_link}`}\r\n                    target='_blank'\r\n                    alt='This is a link'\r\n                  >\r\n                    <div className='circle'></div>\r\n                  </a>\r\n                </div>\r\n              );\r\n            }\r\n          });\r\n        });\r\n      }\r\n    });\r\n    return hotS;\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    history.push(\r\n      `/storyline/${props.uuid}/${storyLine.storylineitem_set[index].id}`\r\n    );\r\n    setViewModal(true);\r\n  };\r\n\r\n  // const handleClose = () => {\r\n  //   console.log(\"Closed Veroo\");\r\n  //   setViewModal(false);\r\n  //   setBg(props.image);\r\n  //   setId(props.id);\r\n  //   setIndex(props.index);\r\n  //   storyLine = [];\r\n  //   history.push(`/`);\r\n  // };\r\n\r\n  const leftButtonClicked = () => {\r\n    if (index <= length - 1 && index > 0) {\r\n      setImgLoading(true);\r\n      setIndex(index - 1);\r\n      history.push(\r\n        `/storyline/${props.uuid}/${storyLine.storylineitem_set[index - 1].id}`\r\n      );\r\n    }\r\n  };\r\n\r\n  const rightButtonClicked = () => {\r\n    // debugger;\r\n    if (index < length - 1) {\r\n      setImgLoading(true);\r\n      setIndex(index + 1);\r\n      history.push(\r\n        `/storyline/${props.uuid}/${storyLine.storylineitem_set[index + 1].id}`\r\n      );\r\n    }\r\n  };\r\n\r\n  const hotspotInternalClick = (id) => {\r\n    // debugger;\r\n    setImgLoading(true);\r\n    let item = storyItemSpec(id);\r\n    item = item[0];\r\n    let st = storyLineExtractor(item.storyline);\r\n    history.push(`/storyline/${st.uuid}/${st.storylineitem_set[0].id}`);\r\n    storyLine = st;\r\n    setId(storyLine.id);\r\n    setIndex(item.order - 1);\r\n  };\r\n\r\n  const hotspotExternalClick = () => {};\r\n\r\n  // const classes = useStyles();\r\n\r\n  const body = (\r\n    <div\r\n      className='imageContainer'\r\n      style={{\r\n        height: storyLine.storylineitem_set[index].is_video && '100%',\r\n        alignSelf: !storyLine.storylineitem_set[index].is_video && 'center',\r\n      }}\r\n    >\r\n      {' '}\r\n      {storyLine.storylineitem_set[index].is_video ? (\r\n        <>\r\n          {imgLoading ? (\r\n            <img id='image' className='loaderImg' src={Loader} />\r\n          ) : (\r\n            ''\r\n          )}\r\n          <video\r\n            key={videoSrc}\r\n            style={{\r\n              height: '100%',\r\n\r\n              width: '100%',\r\n              backgroundSize: 'auto',\r\n              position: 'absolute',\r\n            }}\r\n            autoPlay\r\n            loop\r\n            onLoad={() => {\r\n              setImgLoading(false);\r\n              // console.log('img is load');\r\n              // alert('img loaded')\r\n            }}\r\n          >\r\n            <source src={videoSrc} />\r\n          </video>\r\n        </>\r\n      ) : (\r\n        <>\r\n          {imgLoading ? (\r\n            <img id='image' className='loaderImg' src={Loader} />\r\n          ) : (\r\n            ''\r\n          )}\r\n          <img\r\n            id='image'\r\n            src={bg}\r\n            style={{ display: imgLoading ? 'none' : 'block' }}\r\n            onLoad={() => {\r\n              setImgLoading(false);\r\n              // console.log('img is load');\r\n              // alert('img loaded')\r\n            }}\r\n          />\r\n        </>\r\n      )}\r\n      {index > 0 && (\r\n        <div className='leftButton' onClick={leftButtonClicked}></div>\r\n      )}\r\n      {index < length - 1 && (\r\n        <div className='rightButton' onClick={rightButtonClicked}></div>\r\n      )}\r\n      {index == length - 1 && <div className='lastStoryText'></div>}\r\n      <div className='hotspots'>{storyItemExtractor(id)}</div>\r\n    </div>\r\n  );\r\n\r\n  let BG = props.image;\r\n\r\n  console.log(storyLine.storylineitem_set[index], 'viewModel');\r\n\r\n  return (\r\n    <div>\r\n      {!props.isRedirectUrl && (\r\n        <div\r\n          style={{\r\n            backgroundImage: `url(\"${BG}\")`,\r\n            backgroundSize: 'cover  ',\r\n          }}\r\n          className='thumbnailContainer'\r\n          onClick={handleOpen}\r\n        ></div>\r\n      )}\r\n      {props.isRedirectUrl && (\r\n        <ModalImage\r\n          image={storyLine.storylineitem_set[index].image}\r\n          viewModal={viewModal}\r\n          body={body}\r\n          imgLoading={imgLoading}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Thumbnail;\r\n",{"ruleId":"42","severity":1,"message":"43","line":2,"column":27,"nodeType":"44","messageId":"45","endLine":2,"endColumn":36},{"ruleId":"42","severity":1,"message":"46","line":2,"column":38,"nodeType":"44","messageId":"45","endLine":2,"endColumn":46},{"ruleId":"47","severity":1,"message":"48","line":32,"column":42,"nodeType":"49","messageId":"50","endLine":32,"endColumn":44},{"ruleId":"51","severity":1,"message":"52","line":26,"column":55,"nodeType":"53","messageId":"54","endLine":26,"endColumn":57},{"ruleId":"47","severity":1,"message":"48","line":27,"column":28,"nodeType":"49","messageId":"50","endLine":27,"endColumn":30},{"ruleId":"55","severity":1,"message":"56","line":41,"column":6,"nodeType":"57","endLine":41,"endColumn":13,"suggestions":"58"},{"ruleId":"51","severity":1,"message":"52","line":46,"column":64,"nodeType":"53","messageId":"54","endLine":46,"endColumn":66},{"ruleId":"51","severity":1,"message":"59","line":55,"column":56,"nodeType":"53","messageId":"54","endLine":55,"endColumn":58},{"ruleId":"51","severity":1,"message":"52","line":60,"column":58,"nodeType":"53","messageId":"54","endLine":60,"endColumn":60},{"ruleId":"51","severity":1,"message":"52","line":67,"column":48,"nodeType":"53","messageId":"54","endLine":67,"endColumn":50},{"ruleId":"47","severity":1,"message":"48","line":68,"column":27,"nodeType":"49","messageId":"50","endLine":68,"endColumn":29},{"ruleId":"51","severity":1,"message":"59","line":74,"column":35,"nodeType":"53","messageId":"54","endLine":74,"endColumn":37},{"ruleId":"47","severity":1,"message":"48","line":75,"column":17,"nodeType":"49","messageId":"50","endLine":75,"endColumn":19},{"ruleId":"51","severity":1,"message":"59","line":77,"column":41,"nodeType":"53","messageId":"54","endLine":77,"endColumn":43},{"ruleId":"60","severity":1,"message":"61","line":161,"column":21,"nodeType":"62","endLine":161,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":242,"column":13,"nodeType":"65","endLine":242,"endColumn":66},{"ruleId":"63","severity":1,"message":"64","line":269,"column":13,"nodeType":"65","endLine":269,"endColumn":66},{"ruleId":"63","severity":1,"message":"64","line":273,"column":11,"nodeType":"65","endLine":282,"endColumn":13},{"ruleId":"47","severity":1,"message":"48","line":291,"column":14,"nodeType":"49","messageId":"50","endLine":291,"endColumn":16},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'storyLine.storylineitem_set'. Either include it or remove the dependency array.","ArrayExpression",["66"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"67","fix":"68"},"Update the dependencies array to be: [index, storyLine.storylineitem_set]",{"range":"69","text":"70"},[1530,1537],"[index, storyLine.storylineitem_set]"]