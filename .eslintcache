[{"D:\\Practice Projects\\Narraflix\\src\\index.js":"1","D:\\Practice Projects\\Narraflix\\src\\Components\\StoryRedirection\\StoryRedirection.js":"2","D:\\Practice Projects\\Narraflix\\src\\store\\reducer.js":"3","D:\\Practice Projects\\Narraflix\\src\\Components\\Home\\Home.js":"4","D:\\Practice Projects\\Narraflix\\src\\Components\\Thumbnail\\Thumbnail.js":"5","E:\\nnnnara\\Narraflix\\src\\Components\\StoryRedirection\\StoryRedirection.js":"6","E:\\nnnnara\\Narraflix\\src\\Components\\Home\\Home.js":"7","E:\\nnnnara\\Narraflix\\src\\App.js":"8","E:\\nnnnara\\Narraflix\\src\\Components\\Thumbnail\\ModalImage.js":"9","E:\\nnnnara\\Narraflix\\src\\store\\index.js":"10","E:\\nnnnara\\Narraflix\\src\\store\\reducer.js":"11","E:\\nnnnara\\Narraflix\\src\\store\\actions.js":"12","E:\\nnnnara\\Narraflix\\src\\services\\index.js":"13","E:\\nnnnara\\Narraflix\\src\\Components\\Thumbnail\\Thumbnail.js":"14","E:\\nnnnara\\Narraflix\\src\\index.js":"15","E:\\nnnnara\\Narraflix\\src\\Components\\NavBar\\NavBar.js":"16","E:\\nnnnara\\Narraflix\\src\\Components\\StoryLine\\StoryLine.js":"17"},{"size":588,"mtime":1613132592764,"results":"18","hashOfConfig":"19"},{"size":1235,"mtime":1628502349362,"results":"20","hashOfConfig":"19"},{"size":891,"mtime":1613132592768,"results":"21","hashOfConfig":"19"},{"size":1404,"mtime":1628503856210,"results":"22","hashOfConfig":"19"},{"size":10212,"mtime":1628503799919,"results":"23","hashOfConfig":"19"},{"size":1236,"mtime":1655035527872,"results":"24","hashOfConfig":"25"},{"size":1407,"mtime":1654524905930,"results":"26","hashOfConfig":"25"},{"size":1050,"mtime":1654525046001,"results":"27","hashOfConfig":"25"},{"size":2235,"mtime":1655031933355,"results":"28","hashOfConfig":"25"},{"size":419,"mtime":1620631956381,"results":"29","hashOfConfig":"25"},{"size":891,"mtime":1654950579456,"results":"30","hashOfConfig":"25"},{"size":1939,"mtime":1655035421146,"results":"31","hashOfConfig":"25"},{"size":35149,"mtime":1621880892550,"results":"32","hashOfConfig":"25"},{"size":13212,"mtime":1655097772237,"results":"33","hashOfConfig":"25"},{"size":588,"mtime":1613481445694,"results":"34","hashOfConfig":"25"},{"size":815,"mtime":1620631956379,"results":"35","hashOfConfig":"25"},{"size":716,"mtime":1655035532255,"results":"36","hashOfConfig":"25"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17abv8n",{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1ba0ydu",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Practice Projects\\Narraflix\\src\\index.js",[],"D:\\Practice Projects\\Narraflix\\src\\Components\\StoryRedirection\\StoryRedirection.js",["74","75","76"],"D:\\Practice Projects\\Narraflix\\src\\store\\reducer.js",[],"D:\\Practice Projects\\Narraflix\\src\\Components\\Home\\Home.js",[],"D:\\Practice Projects\\Narraflix\\src\\Components\\Thumbnail\\Thumbnail.js",["77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92"],"import './Thumbnail.css';\r\n// import Modal from \"@material-ui/core/Modal\";\r\n// import { makeStyles } from \"@material-ui/core/styles\";\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport ModalImage from './ModalImage';\r\nimport Loader from '../../assets/Img/loaderrrrr.gif';\r\n\r\nconst Thumbnail = (props) => {\r\n  let history = useHistory();\r\n  let { sid } = useParams();\r\n  //useState\r\n  const [viewModal, setViewModal] = useState(props.open);\r\n  const storyItems = useSelector((state) => state.storyItems);\r\n  const hotSpots = useSelector((state) => state.hotSpots);\r\n  const [bg, setBg] = useState(props.image);\r\n  const [index, setIndex] = useState(props.index);\r\n  const storyLines = useSelector((state) => state.storyLines);\r\n  const [id, setId] = useState(props.id || sid);\r\n  // const [width, setWidth] = useState(window.innerWidth);\r\n  const [imgLoading, setImgLoading] = useState(true);\r\n  const [videoSrc, setVideoSrc] = useState(null);\r\n\r\n  const storyLineExtractor = (id) => {\r\n    let storyLine = storyLines.filter((findStoryLine) => {\r\n      if (findStoryLine.id == id) {\r\n        return findStoryLine;\r\n      }\r\n    });\r\n\r\n    storyLine = storyLine[0];\r\n    return storyLine;\r\n  };\r\n  useEffect(() => {\r\n    // debugger;\r\n    setBg(storyLine.storylineitem_set[index].image);\r\n    if (storyLine.storylineitem_set[index].is_video) {\r\n      setVideoSrc(storyLine.storylineitem_set[index].video);\r\n    }\r\n  }, [index]);\r\n  let storyLine = storyLineExtractor(id);\r\n  let length = storyLine.storylineitem_set.length;\r\n\r\n  const storyItemSpec = (id) => {\r\n    let storyItemObjects = storyItems.filter((storyItemObject) => {\r\n      if (storyItemObject.id === id) {\r\n        return storyItemObject;\r\n      }\r\n    });\r\n    return storyItemObjects;\r\n  };\r\n  const storyItemExtractor = (id) => {\r\n    // debugger;\r\n    let hotSpotSet = storyItems.map((currentStoryLine) => {\r\n      if (currentStoryLine.storyline === id) {\r\n        return currentStoryLine.hotspot_set;\r\n      }\r\n    });\r\n    hotSpotSet = hotSpotSet.filter((filterUndefinedItem) => {\r\n      if (filterUndefinedItem !== undefined) {\r\n        return filterUndefinedItem;\r\n      }\r\n    });\r\n    let hotS = hotSpotSet.map((nestedArrays) => {\r\n      return nestedArrays.map((nestedArray) => {\r\n        return hotSpots.filter((filteredArray) => {\r\n          if (nestedArray == filteredArray.id) {\r\n            return filteredArray;\r\n          }\r\n        });\r\n      });\r\n    });\r\n    hotS = hotS.map((data, Index) => {\r\n      if (Index == index) {\r\n        return data.map((hotspots) => {\r\n          return hotspots.map((hotspot) => {\r\n            if (\r\n              hotspot.type === 'link' &&\r\n              (!imgLoading || storyLine.storylineitem_set[index].is_video)\r\n            ) {\r\n              // console.log('Hotspots', hotspot);\r\n              // const windowWidth = window.innerWidth;\r\n              // const imageWidth =\r\n              //   document.getElementsByClassName('imageContainer')[0]\r\n              //     .clientWidth;\r\n\r\n              // const remainingWidth = (windowWidth - imageWidth) / 2;\r\n\r\n              // const horizontalHotSpotPosition =\r\n              //   (remainingWidth + (hotspot.position_left / 100) * imageWidth) /\r\n              //   100;\r\n\r\n              // const windowHeight = window.innerHeight;\r\n              // const imageHeight = document.getElementById('image').clientHeight;\r\n\r\n              // const remainingHeight = (windowHeight - imageHeight) / 2;\r\n\r\n              // const verticalHotSpotPosition =\r\n              //   (remainingHeight + (hotspot.position_top / 100) * imageHeight) /\r\n              //   100;\r\n\r\n              // console.log({\r\n              //   horizontalHotSpotPosition,\r\n              //   verticalHotSpotPosition,\r\n              // });\r\n\r\n              return (\r\n                <div\r\n                  className='hotspot'\r\n                  style={{\r\n                    position: 'absolute',\r\n                    fontSize: `${hotspot.font_size}`,\r\n                    textAlign: `${hotspot.text_align}`,\r\n                    top: `${hotspot.position_top}%`,\r\n                    left: `${hotspot.position_left}%`,\r\n                    color: `#${hotspot.text_hex_color}`,\r\n                  }}\r\n                  onClick={() =>\r\n                    hotspotInternalClick(hotspot.link_to_story_line_item)\r\n                  }\r\n                >\r\n                  {' '}\r\n                  <div className='circle'></div>\r\n                </div>\r\n              );\r\n            } else if (\r\n              hotspot.type === 'text' &&\r\n              (!imgLoading || storyLine.storylineitem_set[index].is_video)\r\n            ) {\r\n              return (\r\n                <p\r\n                  style={{\r\n                    position: 'absolute',\r\n                    fontSize: `${hotspot.font_size}`,\r\n                    textAlign: `${hotspot.text_align}`,\r\n                    top: `${hotspot.position_top}%`,\r\n                    left: `${hotspot.position_left}%`,\r\n                    color: `#${hotspot.text_hex_color}`,\r\n                  }}\r\n                >\r\n                  {hotspot.content}\r\n                </p>\r\n              );\r\n            } else if (\r\n              hotspot.type === 'web' &&\r\n              (!imgLoading || storyLine.storylineitem_set[index].is_video)\r\n            ) {\r\n              return (\r\n                <div className='hotspot web' onClick={hotspotExternalClick}>\r\n                  <a\r\n                    style={{\r\n                      position: 'absolute',\r\n                      fontSize: `${hotspot.font_size}`,\r\n                      textAlign: `${hotspot.text_align}`,\r\n                      top: `${hotspot.position_top}%`,\r\n                      left: `${hotspot.position_left}%`,\r\n                      color: `#${hotspot.text_hex_color}`,\r\n                    }}\r\n                    href={`${hotspot.external_link}`}\r\n                    target='_blank'\r\n                    alt='This is a link'\r\n                  >\r\n                    <div className='circle'></div>\r\n                  </a>\r\n                </div>\r\n              );\r\n            }\r\n          });\r\n        });\r\n      }\r\n    });\r\n    return hotS;\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    history.push(\r\n      `/storyline/${props.uuid}/${storyLine.storylineitem_set[index].id}`\r\n    );\r\n    setViewModal(true);\r\n  };\r\n\r\n  // const handleClose = () => {\r\n  //   console.log(\"Closed Veroo\");\r\n  //   setViewModal(false);\r\n  //   setBg(props.image);\r\n  //   setId(props.id);\r\n  //   setIndex(props.index);\r\n  //   storyLine = [];\r\n  //   history.push(`/`);\r\n  // };\r\n\r\n  const leftButtonClicked = () => {\r\n    if (index <= length - 1 && index > 0) {\r\n      setImgLoading(true);\r\n      setIndex(index - 1);\r\n      history.push(\r\n        `/storyline/${props.uuid}/${storyLine.storylineitem_set[index - 1].id}`\r\n      );\r\n    }\r\n  };\r\n\r\n  const rightButtonClicked = () => {\r\n    // debugger;\r\n    if (index < length - 1) {\r\n      setImgLoading(true);\r\n      setIndex(index + 1);\r\n      history.push(\r\n        `/storyline/${props.uuid}/${storyLine.storylineitem_set[index + 1].id}`\r\n      );\r\n    }\r\n  };\r\n\r\n  const hotspotInternalClick = (id) => {\r\n    // debugger;\r\n    setImgLoading(true);\r\n    let item = storyItemSpec(id);\r\n    item = item[0];\r\n    let st = storyLineExtractor(item.storyline);\r\n    history.push(`/storyline/${st.uuid}/${st.storylineitem_set[0].id}`);\r\n    storyLine = st;\r\n    setId(storyLine.id);\r\n    setIndex(item.order - 1);\r\n  };\r\n\r\n  const hotspotExternalClick = () => {};\r\n\r\n  // const classes = useStyles();\r\n\r\n  const body = (\r\n    <div\r\n      className='imageContainer'\r\n      style={{\r\n        height: storyLine.storylineitem_set[index].is_video && '100%',\r\n        alignSelf: !storyLine.storylineitem_set[index].is_video && 'center',\r\n      }}\r\n    >\r\n      {' '}\r\n      {storyLine.storylineitem_set[index].is_video ? (\r\n        <>\r\n          {imgLoading ? (\r\n            <img id='image' className='loaderImg' src={Loader} />\r\n          ) : (\r\n            ''\r\n          )}\r\n          <video\r\n            key={videoSrc}\r\n            style={{\r\n              height: '100%',\r\n\r\n              width: '100%',\r\n              backgroundSize: 'auto',\r\n              position: 'absolute',\r\n            }}\r\n            autoPlay\r\n            loop\r\n            onLoad={() => {\r\n              setImgLoading(false);\r\n              // console.log('img is load');\r\n              // alert('img loaded')\r\n            }}\r\n          >\r\n            <source src={videoSrc} />\r\n          </video>\r\n        </>\r\n      ) : (\r\n        <>\r\n          {imgLoading ? (\r\n            <img id='image' className='loaderImg' src={Loader} />\r\n          ) : (\r\n            ''\r\n          )}\r\n          <img\r\n            id='image'\r\n            src={bg}\r\n            style={{ display: imgLoading ? 'none' : 'block' }}\r\n            onLoad={() => {\r\n              setImgLoading(false);\r\n              // console.log('img is load');\r\n              // alert('img loaded')\r\n            }}\r\n          />\r\n        </>\r\n      )}\r\n      {index > 0 && (\r\n        <div className='leftButton' onClick={leftButtonClicked}></div>\r\n      )}\r\n      {index < length - 1 && (\r\n        <div className='rightButton' onClick={rightButtonClicked}></div>\r\n      )}\r\n      {index == length - 1 && <div className='lastStoryText'></div>}\r\n      <div className='hotspots'>{storyItemExtractor(id)}</div>\r\n    </div>\r\n  );\r\n\r\n  let BG = props.image;\r\n\r\n  console.log(storyLine.storylineitem_set[index], 'viewModel');\r\n\r\n  return (\r\n    <div>\r\n      {!props.isRedirectUrl && (\r\n        <div\r\n          style={{\r\n            backgroundImage: `url(\"${BG}\")`,\r\n            backgroundSize: 'cover  ',\r\n          }}\r\n          className='thumbnailContainer'\r\n          onClick={handleOpen}\r\n        ></div>\r\n      )}\r\n      {props.isRedirectUrl && (\r\n        <ModalImage\r\n          image={storyLine.storylineitem_set[index].image}\r\n          viewModal={viewModal}\r\n          body={body}\r\n          imgLoading={imgLoading}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Thumbnail;\r\n","E:\\nnnnara\\Narraflix\\src\\Components\\StoryRedirection\\StoryRedirection.js",["93","94","95"],"E:\\nnnnara\\Narraflix\\src\\Components\\Home\\Home.js",[],"E:\\nnnnara\\Narraflix\\src\\App.js",["96"],"E:\\nnnnara\\Narraflix\\src\\Components\\Thumbnail\\ModalImage.js",[],"E:\\nnnnara\\Narraflix\\src\\store\\index.js",["97"],"E:\\nnnnara\\Narraflix\\src\\store\\reducer.js",[],"E:\\nnnnara\\Narraflix\\src\\store\\actions.js",["98"],"E:\\nnnnara\\Narraflix\\src\\services\\index.js",["99"],"E:\\nnnnara\\Narraflix\\src\\Components\\Thumbnail\\Thumbnail.js",["100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116"],"import \"./Thumbnail.css\";\r\n// import Modal from \"@material-ui/core/Modal\";\r\n// import { makeStyles } from \"@material-ui/core/styles\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport ModalImage from \"./ModalImage\";\r\nimport Loader from \"../../assets/Img/loaderrrrr.gif\";\r\nimport logoImg from \"../../assets/Img/capture.PNG\";\r\nimport text from \"../../assets/Img/text.PNG\";\r\n\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nconst Thumbnail = (props) => {\r\n  let history = useHistory();\r\n  let { sid } = useParams();\r\n  //useState\r\n  const [viewModal, setViewModal] = useState(props.open);\r\n  const storyItems = useSelector((state) => state.storyItems);\r\n  const hotSpots = useSelector((state) => state.hotSpots);\r\n  const [bg, setBg] = useState(props.image);\r\n  const [index, setIndex] = useState(props.index);\r\n  const storyLines = useSelector((state) => state.storyLines);\r\n  const [id, setId] = useState(props.id || sid);\r\n  // const [width, setWidth] = useState(window.innerWidth);\r\n  const [imgLoading, setImgLoading] = useState(true);\r\n  const [videoSrc, setVideoSrc] = useState(null);\r\n  const [lastShareStory, setLastShareStory] = useState(false);\r\n\r\n  const storyLineExtractor = (id) => {\r\n    let storyLine = storyLines.filter((findStoryLine) => {\r\n      if (findStoryLine.id == id) {\r\n        return findStoryLine;\r\n      }\r\n    });\r\n\r\n    storyLine = storyLine[0];\r\n    return storyLine;\r\n  };\r\n  useEffect(() => {\r\n    // debugger;\r\n    setBg(storyLine?.storylineitem_set[index]?.image);\r\n    if (storyLine?.storylineitem_set[index]?.is_video) {\r\n      setVideoSrc(storyLine.storylineitem_set[index]?.video);\r\n    }\r\n  }, [index]);\r\n  let storyLine = storyLineExtractor(id);\r\n  let length = storyLine.storylineitem_set.length;\r\n\r\n  const storyItemSpec = (id) => {\r\n    let storyItemObjects = storyItems.filter((storyItemObject) => {\r\n      if (storyItemObject.id === id) {\r\n        return storyItemObject;\r\n      }\r\n    });\r\n    return storyItemObjects;\r\n  };\r\n  const storyItemExtractor = (id) => {\r\n    // let hotSpotSet = storyItems.filter((currentStoryLine) => {\r\n    //   if (currentStoryLine.storyline === id) {\r\n    //     return currentStoryLine.hotspot_set;\r\n    //   }\r\n    // });\r\n\r\n    let hotSpotSet = storyItems.filter((x) => x.storyline === id);\r\n\r\n    if (hotSpotSet) {\r\n      hotSpotSet.sort((a, b) => {\r\n        return a.order - b.order;\r\n      });\r\n    }\r\n\r\n    // hotSpotSet = hotSpotSet.filter((filterUndefinedItem) => {\r\n    //   if (filterUndefinedItem !== undefined) {\r\n    //     return filterUndefinedItem;\r\n    //   }\r\n    // });\r\n    let hotS = hotSpotSet.map((nestedArrays) => {\r\n      return nestedArrays.hotspot_set.map((nestedArray) => {\r\n        return hotSpots.filter((filteredArray) => {\r\n          if (nestedArray == filteredArray.id) {\r\n            return filteredArray;\r\n          }\r\n        });\r\n      });\r\n    });\r\n    hotS = hotS.map((data, Index) => {\r\n      if (Index == index) {\r\n        return data.map((hotspots) => {\r\n          return hotspots.map((hotspot) => {\r\n            if (\r\n              hotspot.type === \"link\" &&\r\n              (!imgLoading || storyLine.storylineitem_set[index].is_video)\r\n            ) {\r\n              // console.log('Hotspots', hotspot);\r\n              // const windowWidth = window.innerWidth;\r\n              // const imageWidth =\r\n              //   document.getElementsByClassName('imageContainer')[0]\r\n              //     .clientWidth;\r\n\r\n              // const remainingWidth = (windowWidth - imageWidth) / 2;\r\n\r\n              // const horizontalHotSpotPosition =\r\n              //   (remainingWidth + (hotspot.position_left / 100) * imageWidth) /\r\n              //   100;\r\n\r\n              // const windowHeight = window.innerHeight;\r\n              // const imageHeight = document.getElementById('image').clientHeight;\r\n\r\n              // const remainingHeight = (windowHeight - imageHeight) / 2;\r\n\r\n              // const verticalHotSpotPosition =\r\n              //   (remainingHeight + (hotspot.position_top / 100) * imageHeight) /\r\n              //   100;\r\n\r\n              // console.log({\r\n              //   horizontalHotSpotPosition,\r\n              //   verticalHotSpotPosition,\r\n              // });\r\n\r\n              return (\r\n                <div\r\n                  className=\"hotspot\"\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    fontSize: `${hotspot.font_size}`,\r\n                    textAlign: `${hotspot.text_align}`,\r\n                    top: `${hotspot.position_top}%`,\r\n                    left: `${hotspot.position_left}%`,\r\n                    color: `#${hotspot.text_hex_color}`,\r\n                  }}\r\n                  onClick={() =>\r\n                    hotspotInternalClick(hotspot.link_to_story_line_item)\r\n                  }\r\n                >\r\n                  {\" \"}\r\n                  <div className=\"circle\"></div>\r\n                </div>\r\n              );\r\n            } else if (\r\n              hotspot.type === \"text\" &&\r\n              (!imgLoading || storyLine.storylineitem_set[index].is_video)\r\n            ) {\r\n              return (\r\n                <p\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    fontSize: `${hotspot.font_size}`,\r\n                    textAlign: `${hotspot.text_align}`,\r\n                    top: `${hotspot.position_top}%`,\r\n                    left: `${hotspot.position_left}%`,\r\n                    color: `#${hotspot.text_hex_color}`,\r\n                  }}\r\n                >\r\n                  {hotspot.content}\r\n                </p>\r\n              );\r\n            } else if (\r\n              hotspot.type === \"web\" &&\r\n              (!imgLoading || storyLine.storylineitem_set[index].is_video)\r\n            ) {\r\n              return (\r\n                <div className=\"hotspot web\" onClick={hotspotExternalClick}>\r\n                  <a\r\n                    style={{\r\n                      position: \"absolute\",\r\n                      fontSize: `${hotspot.font_size}`,\r\n                      textAlign: `${hotspot.text_align}`,\r\n                      top: `${hotspot.position_top}%`,\r\n                      left: `${hotspot.position_left}%`,\r\n                      color: `#${hotspot.text_hex_color}`,\r\n                    }}\r\n                    href={`${hotspot.external_link}`}\r\n                    target=\"_blank\"\r\n                    alt=\"This is a link\"\r\n                  >\r\n                    <div className=\"circle\"></div>\r\n                  </a>\r\n                </div>\r\n              );\r\n            }\r\n          });\r\n        });\r\n      }\r\n    });\r\n    return hotS;\r\n  };\r\n  const handleOpen = () => {\r\n    history.push(\r\n      `/storyline/${props.uuid}/${storyLine.storylineitem_set[index].id}`\r\n    );\r\n    setViewModal(true);\r\n  };\r\n\r\n  // const handleClose = () => {\r\n  //   console.log(\"Closed Veroo\");\r\n  //   setViewModal(false);\r\n  //   setBg(props.image);\r\n  //   setId(props.id);\r\n  //   setIndex(props.index);\r\n  //   storyLine = [];\r\n  //   history.push(`/`);\r\n  // };\r\n\r\n  const leftButtonClicked = () => {\r\n    if (index > 0) {\r\n      setImgLoading(true);\r\n      setIndex(index - 1);\r\n      history.push(\r\n        `/storyline/${props.uuid}/${storyLine.storylineitem_set[index - 1].id}`\r\n      );\r\n      setLastShareStory(false);\r\n    }\r\n  };\r\n\r\n  const rightButtonClicked = () => {\r\n    // debugger;\r\n    if (index < length - 1) {\r\n      setImgLoading(true);\r\n      setIndex(index + 1);\r\n      history.push(\r\n        `/storyline/${props.uuid}/${storyLine.storylineitem_set[index + 1].id}`\r\n      );\r\n    } else {\r\n      setLastShareStory(true);\r\n      setIndex(index + 1);\r\n    }\r\n  };\r\n\r\n  const hotspotInternalClick = (id) => {\r\n    // debugger;\r\n    setImgLoading(true);\r\n    let item = storyItemSpec(id);\r\n    item = item[0];\r\n    let st = storyLineExtractor(item.storyline);\r\n    history.push(`/storyline/${st.uuid}/${st.storylineitem_set[0].id}`);\r\n    storyLine = st;\r\n    setId(storyLine.id);\r\n    setIndex(item.order - 1);\r\n  };\r\n\r\n  const getLastStoryContent = () => {\r\n    const shareStoryUrl = `https://stories.narraflix.com/storyline/${props.uuid}/${storyLine.storylineitem_set[0].id}`;\r\n\r\n    const shareButtons = [\r\n      {\r\n        name: \"WhatsApp\",\r\n        url: `https://api.whatsapp.com/send?text=${shareStoryUrl}`,\r\n        backGroundColor: \"#26D367\",\r\n        color: \"#3E486C\",\r\n      },\r\n      {\r\n        name: \"Facebook\",\r\n        url: `https://www.facebook.com/sharer/sharer.php?u=${shareStoryUrl}`,\r\n        backGroundColor: \"#4167B2\",\r\n        color: \"#FFFFFF\",\r\n      },\r\n      {\r\n        name: \"Twitter\",\r\n        url: `https://twitter.com/intent/tweet?url=${shareStoryUrl}`,\r\n        backGroundColor: \"#1DA1F3\",\r\n        color: \"#FFFFFF\",\r\n      },\r\n      {\r\n        name: \"E-Mail\",\r\n        url: `mailto:?&subject=&body=${shareStoryUrl}`,\r\n        backGroundColor: \"#A6A6A6\",\r\n        color: \"#FFFFFF\",\r\n      },\r\n      {\r\n        name: \"Link Kopieren\",\r\n        url: `https://api.whatsapp.com/send?text=${shareStoryUrl}`,\r\n        backGroundColor: \"#FFFFFF\",\r\n        color: \"#3E486C\",\r\n      },\r\n    ];\r\n\r\n    return (\r\n      <div className=\"share-section\">\r\n        <div className=\"share-story-img\">\r\n          <img src={text} />\r\n        </div>\r\n        <div className=\"button-wrapper\">\r\n          {shareButtons.map((btn) => (\r\n            <Button\r\n              style={{\r\n                backgroundColor: btn.backGroundColor,\r\n                color: btn.color,\r\n                zIndex: \"999999999\",\r\n                textTransform: \"unset !important\",\r\n              }}\r\n              onClick={() => {\r\n                if (btn.name === \"Link Kopieren\") {\r\n                  navigator.clipboard.writeText(btn.url);\r\n                } else window.open(btn.url, \"_blank\");\r\n              }}\r\n            >\r\n              {btn.name}\r\n            </Button>\r\n          ))}\r\n        </div>\r\n        <div className=\"share-story-img\">\r\n          <a href=\"https://narraflix.com\">\r\n            <img src={logoImg} />\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  const hotspotExternalClick = () => {};\r\n\r\n  // const classes = useStyles();\r\n\r\n  // Height Handling Inline for videos\r\n  const body = (\r\n    <div\r\n      className=\"imageContainer\"\r\n      // style={{\r\n\r\n      //   alignSelf: !storyLine?.storylineitem_set[index]?.is_video && \"center\",\r\n      // }}\r\n    >\r\n      {!lastShareStory ? (\r\n        <>\r\n          {storyLine.storylineitem_set[index].is_video ? (\r\n            <>\r\n              {imgLoading ? (\r\n                <img\r\n                  id=\"image\"\r\n                  className=\"loaderImg\"\r\n                  src={storyLine.storylineitem_set[index]?.image}\r\n                />\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <video\r\n                key={videoSrc}\r\n                style={{\r\n                  height: \"100%\",\r\n\r\n                  width: \"100%\",\r\n                  backgroundSize: \"auto\",\r\n                  position: \"absolute\",\r\n                }}\r\n                autoPlay\r\n                loop\r\n                onLoad={() => {\r\n                  setImgLoading(false);\r\n                  // console.log('img is load');\r\n                  // alert('img loaded')\r\n                }}\r\n              >\r\n                <source src={videoSrc} />\r\n              </video>\r\n            </>\r\n          ) : (\r\n            <>\r\n              {imgLoading ? (\r\n                <img id=\"image\" className=\"loaderImg\" src={Loader} />\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <img\r\n                id=\"image\"\r\n                src={bg}\r\n                style={{ display: imgLoading ? \"none\" : \"block\" }}\r\n                onLoad={() => {\r\n                  setImgLoading(false);\r\n                  // console.log('img is load');\r\n                  // alert('img loaded')\r\n                }}\r\n              />\r\n            </>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <>{getLastStoryContent()}</>\r\n      )}{\" \"}\r\n      {index > 0 && (\r\n        <div className=\"leftButton\" onClick={leftButtonClicked}></div>\r\n      )}\r\n      {!lastShareStory && (\r\n        <div className=\"rightButton\" onClick={rightButtonClicked}></div>\r\n      )}\r\n      {index == length - 1 && <div className=\"lastStoryText\"></div>}\r\n      <div className=\"hotspots\">{storyItemExtractor(id)}</div>\r\n    </div>\r\n  );\r\n\r\n  let BG = props.image;\r\n\r\n  console.log(storyLine.storylineitem_set[index], \"viewModel\");\r\n\r\n  return (\r\n    <div>\r\n      {!props.isRedirectUrl && (\r\n        <div\r\n          style={{\r\n            backgroundImage: `url(\"${BG}\")`,\r\n            backgroundSize: \"cover  \",\r\n          }}\r\n          className=\"thumbnailContainer\"\r\n          onClick={handleOpen}\r\n        ></div>\r\n      )}\r\n      {props.isRedirectUrl && (\r\n        <ModalImage\r\n          lastShareStory={lastShareStory}\r\n          image={storyLine?.storylineitem_set[index]?.image}\r\n          viewModal={viewModal}\r\n          body={body}\r\n          imgLoading={imgLoading}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Thumbnail;\r\n","E:\\nnnnara\\Narraflix\\src\\index.js",[],["117","118"],"E:\\nnnnara\\Narraflix\\src\\Components\\NavBar\\NavBar.js",["119"],"E:\\nnnnara\\Narraflix\\src\\Components\\StoryLine\\StoryLine.js",[],{"ruleId":"120","severity":1,"message":"121","line":2,"column":27,"nodeType":"122","messageId":"123","endLine":2,"endColumn":36},{"ruleId":"120","severity":1,"message":"124","line":2,"column":38,"nodeType":"122","messageId":"123","endLine":2,"endColumn":46},{"ruleId":"125","severity":1,"message":"126","line":32,"column":42,"nodeType":"127","messageId":"128","endLine":32,"endColumn":44},{"ruleId":"129","severity":1,"message":"130","line":26,"column":55,"nodeType":"131","messageId":"132","endLine":26,"endColumn":57},{"ruleId":"125","severity":1,"message":"126","line":27,"column":28,"nodeType":"127","messageId":"128","endLine":27,"endColumn":30},{"ruleId":"133","severity":1,"message":"134","line":41,"column":6,"nodeType":"135","endLine":41,"endColumn":13,"suggestions":"136"},{"ruleId":"129","severity":1,"message":"130","line":46,"column":64,"nodeType":"131","messageId":"132","endLine":46,"endColumn":66},{"ruleId":"129","severity":1,"message":"137","line":55,"column":56,"nodeType":"131","messageId":"132","endLine":55,"endColumn":58},{"ruleId":"129","severity":1,"message":"130","line":60,"column":58,"nodeType":"131","messageId":"132","endLine":60,"endColumn":60},{"ruleId":"129","severity":1,"message":"130","line":67,"column":48,"nodeType":"131","messageId":"132","endLine":67,"endColumn":50},{"ruleId":"125","severity":1,"message":"126","line":68,"column":27,"nodeType":"127","messageId":"128","endLine":68,"endColumn":29},{"ruleId":"129","severity":1,"message":"137","line":74,"column":35,"nodeType":"131","messageId":"132","endLine":74,"endColumn":37},{"ruleId":"125","severity":1,"message":"126","line":75,"column":17,"nodeType":"127","messageId":"128","endLine":75,"endColumn":19},{"ruleId":"129","severity":1,"message":"137","line":77,"column":41,"nodeType":"131","messageId":"132","endLine":77,"endColumn":43},{"ruleId":"138","severity":1,"message":"139","line":161,"column":21,"nodeType":"140","endLine":161,"endColumn":36},{"ruleId":"141","severity":1,"message":"142","line":242,"column":13,"nodeType":"143","endLine":242,"endColumn":66},{"ruleId":"141","severity":1,"message":"142","line":269,"column":13,"nodeType":"143","endLine":269,"endColumn":66},{"ruleId":"141","severity":1,"message":"142","line":273,"column":11,"nodeType":"143","endLine":282,"endColumn":13},{"ruleId":"125","severity":1,"message":"126","line":291,"column":14,"nodeType":"127","messageId":"128","endLine":291,"endColumn":16},{"ruleId":"120","severity":1,"message":"121","line":2,"column":27,"nodeType":"122","messageId":"123","endLine":2,"endColumn":36},{"ruleId":"120","severity":1,"message":"124","line":2,"column":38,"nodeType":"122","messageId":"123","endLine":2,"endColumn":46},{"ruleId":"125","severity":1,"message":"126","line":32,"column":42,"nodeType":"127","messageId":"128","endLine":32,"endColumn":44},{"ruleId":"120","severity":1,"message":"144","line":4,"column":8,"nodeType":"122","messageId":"123","endLine":4,"endColumn":14},{"ruleId":"120","severity":1,"message":"145","line":4,"column":31,"nodeType":"122","messageId":"123","endLine":4,"endColumn":47},{"ruleId":"146","severity":1,"message":"147","line":79,"column":1,"nodeType":"148","endLine":83,"endColumn":3},{"ruleId":"146","severity":1,"message":"147","line":977,"column":1,"nodeType":"148","endLine":977,"endColumn":68},{"ruleId":"120","severity":1,"message":"149","line":4,"column":17,"nodeType":"122","messageId":"123","endLine":4,"endColumn":28},{"ruleId":"129","severity":1,"message":"130","line":31,"column":55,"nodeType":"131","messageId":"132","endLine":31,"endColumn":57},{"ruleId":"125","severity":1,"message":"126","line":32,"column":28,"nodeType":"127","messageId":"128","endLine":32,"endColumn":30},{"ruleId":"133","severity":1,"message":"134","line":46,"column":6,"nodeType":"135","endLine":46,"endColumn":13,"suggestions":"150"},{"ruleId":"129","severity":1,"message":"130","line":51,"column":64,"nodeType":"131","messageId":"132","endLine":51,"endColumn":66},{"ruleId":"129","severity":1,"message":"130","line":80,"column":48,"nodeType":"131","messageId":"132","endLine":80,"endColumn":50},{"ruleId":"125","severity":1,"message":"126","line":81,"column":27,"nodeType":"127","messageId":"128","endLine":81,"endColumn":29},{"ruleId":"129","severity":1,"message":"137","line":87,"column":35,"nodeType":"131","messageId":"132","endLine":87,"endColumn":37},{"ruleId":"125","severity":1,"message":"126","line":88,"column":17,"nodeType":"127","messageId":"128","endLine":88,"endColumn":19},{"ruleId":"129","severity":1,"message":"137","line":90,"column":41,"nodeType":"131","messageId":"132","endLine":90,"endColumn":43},{"ruleId":"138","severity":1,"message":"139","line":174,"column":21,"nodeType":"140","endLine":174,"endColumn":36},{"ruleId":"141","severity":1,"message":"142","line":281,"column":11,"nodeType":"143","endLine":281,"endColumn":29},{"ruleId":"141","severity":1,"message":"142","line":304,"column":13,"nodeType":"143","endLine":304,"endColumn":34},{"ruleId":"141","severity":1,"message":"142","line":328,"column":17,"nodeType":"143","endLine":332,"endColumn":19},{"ruleId":"141","severity":1,"message":"142","line":359,"column":17,"nodeType":"143","endLine":359,"endColumn":70},{"ruleId":"141","severity":1,"message":"142","line":363,"column":15,"nodeType":"143","endLine":372,"endColumn":17},{"ruleId":"125","severity":1,"message":"126","line":385,"column":14,"nodeType":"127","messageId":"128","endLine":385,"endColumn":16},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"120","severity":1,"message":"155","line":3,"column":9,"nodeType":"122","messageId":"123","endLine":3,"endColumn":22},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'storyLine.storylineitem_set'. Either include it or remove the dependency array.","ArrayExpression",["156"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'NavBar' is defined but never used.","'devToolsEnhancer' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useCallback' is defined but never used.",["157"],"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"'navMenuViewer' is assigned a value but never used.",{"desc":"160","fix":"161"},{"desc":"160","fix":"162"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [index, storyLine.storylineitem_set]",{"range":"163","text":"164"},{"range":"165","text":"164"},[1530,1537],"[index, storyLine.storylineitem_set]",[1759,1766]]